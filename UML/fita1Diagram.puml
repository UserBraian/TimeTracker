@startuml
skinparam classAttributeIconSize 0
class Main
abstract Component
class Project
class Task
class Interval
class Clock
class Printer


Main-->Component
Component <|-- Task
Component <|-- Project: father 
Project "1" o-- "*" Component : children
Task "1"*-- "*" Interval
Printer -up-|> Visitor


class Main{
+main()
}

class Clock{
<size:10> Observable </size>
{static}-instance: Clock
-Clock(name: string)
+{static} Clock getInstance()
-void tick()
+getHour()
}

abstract Component{
-name: string
-parent: Component
-tags: ArrayList<string>
-startDate LocalDateTime
-endDate LocalDateTime
-duration: Duration
+Component(name: String, parent: Component, tags: ArrayList<string>)
+void updateTree()
+void acceptVisitor(v: Visitor)

}

class Project{
<size:10> Composite </size>
+Project(name: string, parent: Component, tags: ArrayList<string>)
+void updateTree()
+getChild(): ArrayList<Component>
+ void acceptVisitor(v: Visitor)
}

class Task{
+Task(name: string, parent: Component)
-intervals: ArrayList<Interval>
+void startTask()
+void stopTask()
+void updateTree()
+void acceptVisitor(v: Visitor)
}

class Interval{
-startTime: LocalDateTime
-endTime: LocalDateTime
-duration: Duration
-taskParent: Task
+ void stop()
+ void update()
+ void acceptVisitor(v: Visitor)
}

Interface Visitor {
+ void visitTask(task: Task)
+ void visitProject(project: Project)
+ void visitInterval(interval: Interval)
}


class Printer {
{static}-instance: Printer
-Printer()
+{static} Clock getInstance()
+ void print(interval: Interval)
+ void visitTask(task: Task)
+ void visitProject(project: Project)
+ void visitInterval(interval: Interval)
}

package "java.util"{
abstract Observable
interface Observer

interface Observer{
+void update()
}

abstract Observable{
-Observers
+void addObsever(Observer)
+void deleteObsever(Observer)
+void notifyObsevers()
}

Observable o-right-> Observer
Observable <|-- Clock
Observer <|.right.Interval
Visitor -[hidden]left- Observable
}
@enduml
